<?xml version="1.0" encoding="utf-8"?>
<root><!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
	<data name="AUDIO_LABEL" xml:space="preserve">
		<value>Audio</value>
	</data>
	<data name="BACK_BUTTON_TEXT" xml:space="preserve">
		<value>BACK</value>
	</data>
	<data name="BACK_TO_GAME_BUTTON" xml:space="preserve">
		<value>Back to game</value>
	</data>
	<data name="BACK_TO_LEVELSELECT_BUTTON" xml:space="preserve">
		<value>Back to level select</value>
	</data>
	<data name="BACK_TO_MAINMENU_BUTTON" xml:space="preserve">
		<value>Back to main menu</value>
	</data>
	<data name="CHAPTER_1_SUBTITLE" xml:space="preserve">
		<value>Getting used to the job</value>
	</data>
	<data name="CHAPTER_1_TITLE" xml:space="preserve">
		<value>Chapter 1</value>
	</data>
	<data name="COMPLIMENT_ONE_STAR_1" xml:space="preserve">
		<value>You made it, but there is room for improvement.</value>
	</data>
	<data name="COMPLIMENT_ONE_STAR_2" xml:space="preserve">
		<value>Keep practicing team, you will keep improving!</value>
	</data>
	<data name="COMPLIMENT_THREE_STARS_1" xml:space="preserve">
		<value>Fantastic job team, yet another problem solved!</value>
	</data>
	<data name="COMPLIMENT_THREE_STARS_2" xml:space="preserve">
		<value>Perfectly done, you're great at figuring stuff out!</value>
	</data>
	<data name="COMPLIMENT_THREE_STARS_3" xml:space="preserve">
		<value>Great job, you should be proud of yourself!</value>
	</data>
	<data name="COMPLIMENT_TWO_STARS_1" xml:space="preserve">
		<value>Decent job team, but there's still room for improvement.</value>
	</data>
	<data name="COMPLIMENT_TWO_STARS_2" xml:space="preserve">
		<value>You made it work, see if you can do it more efficiently now!</value>
	</data>
	<data name="COMPLIMENT_TWO_STARS_3" xml:space="preserve">
		<value>Well done, it's only a small step to a perfect score from here!</value>
	</data>
	<data name="CREATE_ROOM_TITLE" xml:space="preserve">
		<value>Create your own Team</value>
	</data>
	<data name="CREATE_TEAM_BUTTON" xml:space="preserve">
		<value>Create Team</value>
	</data>
	<data name="CREATE_TEAM_PLACEHOLDER" xml:space="preserve">
		<value>Enter team name...</value>
	</data>
	<data name="LANGUAGE_LABEL" xml:space="preserve">
		<value>Language</value>
	</data>
	<data name="LEVEL_GOALS_DEMO1" xml:space="preserve">
		<value>Reach the endgoal.</value>
	</data>
	<data name="LEVEL_GOALS_TITLE" xml:space="preserve">
		<value>Goals:</value>
	</data>
	<data name="LEVEL_SCORE" xml:space="preserve">
		<value>Score</value>
	</data>
	<data name="LEVEL_TOTAL_SCORE" xml:space="preserve">
		<value>Total score</value>
	</data>
	<data name="LEVELSELECT_PLAY_BUTTON" xml:space="preserve">
		<value>PLAY</value>
	</data>
	<data name="MENU_BUTTON_INGAME" xml:space="preserve">
		<value>Menu</value>
	</data>
	<data name="MENU_MAIN_BUTTON_PLAY_MULTIPLAYER" xml:space="preserve">
		<value>Play together</value>
	</data>
	<data name="MENU_MAIN_BUTTON_PLAY_MULTIPLAYER_TITLE" xml:space="preserve">
		<value>Help the citizens!</value>
	</data>
	<data name="MENU_MAIN_BUTTON_PLAY_SINGLEPLAYER" xml:space="preserve">
		<value>Learn to play</value>
	</data>
	<data name="MENU_MAIN_BUTTON_PLAY_SINGLEPLAYER_TITLE" xml:space="preserve">
		<value>Basic training</value>
	</data>
	<data name="MONOLOGUE_CLICK_TO_CONTINUE" xml:space="preserve">
		<value>Click to continue...</value>
	</data>
	<data name="MP_1_MONOLOGUE_1" xml:space="preserve">
		<value>Switch places!</value>
	</data>
	<data name="MP_2_MONOLOGUE_1" xml:space="preserve">
		<value>Watch out for each other!</value>
	</data>
	<data name="MP_3_MONOLOGUE_1" xml:space="preserve">
		<value>Sometimes you can't succeed without each other!</value>
	</data>
	<data name="MP_4_MONOLOGUE_1" xml:space="preserve">
		<value>A switch can be linked to multiple fences!</value>
	</data>
	<data name="MP_5_MONOLOGUE_1" xml:space="preserve">
		<value>This is a tough one. Think about it first!</value>
	</data>
	<data name="MP_TUTORIAL_WAIT_1_LEVEL_GOALS" xml:space="preserve">
		<value>Reach the flag</value>
	</data>
	<data name="MP_TUTORIAL_WAIT_1_LEVEL_MONOLOGUE_1" xml:space="preserve">
		<value>Teamwork is important! You will not succeed without it!</value>
	</data>
	<data name="MP_TUTORIAL_WAIT_1_LEVEL_NAME" xml:space="preserve">
		<value>Teamwork</value>
	</data>
	<data name="MUSIC_LABEL" xml:space="preserve">
		<value>Music</value>
	</data>
	<data name="OPTIONS_LABEL" xml:space="preserve">
		<value>Options</value>
	</data>
	<data name="PLAYER" xml:space="preserve">
		<value>Player</value>
	</data>
	<data name="RECORD_PLAYTHROUGH_LABEL" xml:space="preserve">
		<value>Record level playthroughs</value>
	</data>
	<data name="ROOM_EXIT_BUTTON" xml:space="preserve">
		<value>Leave</value>
	</data>
	<data name="ROOM_PLAY_BUTTON" xml:space="preserve">
		<value>Play</value>
	</data>
	<data name="ROOM_READY_LABEL" xml:space="preserve">
		<value>Ready</value>
	</data>
	<data name="SOUND_LABEL" xml:space="preserve">
		<value>Sound</value>
	</data>
	<data name="SP_TUTORIAL_INTERACT_3_LEVEL_GOALS" xml:space="preserve">
		<value>- Open the fence
- Reach the flag</value>
	</data>
	<data name="SP_TUTORIAL_INTERACT_3_LEVEL_MONOLOGUE_1" xml:space="preserve">
		<value>This is a fence. It blocks the path to the flag!</value>
	</data>
	<data name="SP_TUTORIAL_INTERACT_3_LEVEL_MONOLOGUE_2" xml:space="preserve">
		<value>Every fence can be opened using the right lever!</value>
	</data>
	<data name="SP_TUTORIAL_INTERACT_3_LEVEL_MONOLOGUE_3" xml:space="preserve">
		<value>Pull the lever with the &lt;sprite name="Interact"&gt; COMMAND</value>
	</data>
	<data name="SP_TUTORIAL_INTERACT_3_LEVEL_NAME" xml:space="preserve">
		<value>Fence &amp; Lever</value>
	</data>
	<data name="SP_TUTORIAL_LOOP_5_LEVEL_GOALS" xml:space="preserve">
		<value>Reach the flag</value>
	</data>
	<data name="SP_TUTORIAL_LOOP_5_LEVEL_MONOLOGUE_1" xml:space="preserve">
		<value>Time for some efficiency!</value>
	</data>
	<data name="SP_TUTORIAL_LOOP_5_LEVEL_MONOLOGUE_2" xml:space="preserve">
		<value>Use the COMMAND &lt;sprite name="Loop"&gt; to run code multiple times!</value>
	</data>
	<data name="SP_TUTORIAL_LOOP_5_LEVEL_NAME" xml:space="preserve">
		<value>The Loop</value>
	</data>
	<data name="SP_TUTORIAL_MOVE_1_LEVEL_GOALS" xml:space="preserve">
		<value>Reach the flag</value>
	</data>
	<data name="SP_TUTORIAL_MOVE_1_LEVEL_MONOLOGUE_1" xml:space="preserve">
		<value>Welcome to Team Fix-IT! Today is your first training!</value>
	</data>
	<data name="SP_TUTORIAL_MOVE_1_LEVEL_MONOLOGUE_2" xml:space="preserve">
		<value>Your goal is the reach te flag.</value>
	</data>
	<data name="SP_TUTORIAL_MOVE_1_LEVEL_MONOLOGUE_3" xml:space="preserve">
		<value>Use the COMMAND &lt;sprite name="Move"&gt; to move forward!</value>
	</data>
	<data name="SP_TUTORIAL_MOVE_1_LEVEL_NAME" xml:space="preserve">
		<value>First steps</value>
	</data>
	<data name="SP_TUTORIAL_TURN_2_LEVEL_GOALS" xml:space="preserve">
		<value>Reach the flag</value>
	</data>
	<data name="SP_TUTORIAL_TURN_2_LEVEL_MONOLOGUE_1" xml:space="preserve">
		<value>The path bends! You will have to turn!</value>
	</data>
	<data name="SP_TUTORIAL_TURN_2_LEVEL_MONOLOGUE_2" xml:space="preserve">
		<value>Use the COMMANDS &lt;sprite name="TurnLeft"&gt; and &lt;sprite name="TurnRight"&gt; to turn!</value>
	</data>
	<data name="SP_TUTORIAL_TURN_2_LEVEL_NAME" xml:space="preserve">
		<value>The bend</value>
	</data>
	<data name="TEAM_NAME" xml:space="preserve">
		<value>Team name: </value>
	</data>
	<data name="VIDEO_CAPTURE_LABEL" xml:space="preserve">
		<value>Gameplay capture</value>
	</data>
</root>